@name COntrolArm SUsepntion
@inputs TopRsus:entity SusRmount:entity  RWheel:entity
@inputs TopLsus:entity SusLmount:entity  LWheel:entity
@inputs BodyPlate:entity TurningProp:entity

@persist T Material:string Color:vector Color2:vector E:entity Size WheelHub Outspacing I BreakColor:vector WheelHubArm RotorSize RotorHeight RotorArm S SpringAngling
@persist RotorTexture:string Debug Spring BodyHolo BodyHoloAng:angle BodyHoloEntity:entity SpringOutspacing AxleShockFatness AxleSpringFatness ArmAngle
@persist ContrArmWidth TurningOffset:angle ContrArmThickness P TurningPlate:entity TurningPlateAng:angle

@persist RInitialArmDistance Rightspring RightSusMount RightspringPivot RightMountPos:vector 
@persist Rightshock RBreakAlignment RBrakeDisk RightspringAimPos
@persist RBrakeDiskTurningOffset:angle 


@persist LInitialArmDistance Leftspring LeftSusMount LeftspringPivot LeftMountPos:vector 
@persist Leftshock LBreakAlignment LBrakeDisk LeftspringAimPos
@persist LBrakeDiskTurningOffset:angle 

@outputs T InitialDistance Flex
@trigger none

interval(10)
runOnChat(1)

#what point on the wheel to aim for
RightWheelPos=RWheel:pos()+RWheel:right()*7
LeftWheelPos=LWheel:pos()+LWheel:right()*-7

if(dupefinished()){reset()}
if(first()|duped()){
    #MORE SETTINGS ON LINE 108
    
    ##NO TOUCHY
    T=0
    S=0
    I=0
    E=entity()
    Size=1
    ##OK YOU CAN TOUCH NOW
    
    Debug=0
    #Holos align themselves to this holo. If stuff is rotating weird, play with agles if holograms arent rotating with the car properly
    BodyHoloAng=ang(0,0,0)
    TurningPlateAng=ang(0,-90,0)
    
    #This is where the hub pivots
    Outspacing=-0.5
    

    Spring=1
    SpringOutspacing=-1.5
    SpringAngling=1
    AxleSpringFatness=1.5
    AxleShockFatness=1
    ArmAngle=-17
    ContrArmWidth=2
    ContrArmThickness=1
    
    TurningOffset=ang(0,180,0)
    RBrakeDiskTurningOffset=ang(0,0,0)
    LBrakeDiskTurningOffset=ang(0,0,0)
    
    WheelHub=1
    WheelHubArm=1  #Broked
    RotorSize=1.35
    RotorHeight=0
    RotorArm=0
    
    Material="models/props_canal/metalwall005b"
    
    #RotorTexture="/phoenix_storms/gear_top"
    #RotorTexture="/phoenix_storms/dome_side"
    RotorTexture="/sprops/trans/wheels/wheel_d_rotor1"
    
    Color=vec(180,180,180)
    BreakColor=vec(130,50,50)
if(Debug){
holoCreate(1000,RightWheelPos,vec(0.25,0.25,0.25))
holoModel(1000,"hq_sphere")
#holoMaterial(I,Material)
holoColor(1000,vec(255,0,0))

#holoAng(1000,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(1000,RWheel)
}
}

if(TurningProp&P<2){
P=P+1
}
if(P==1){
if(Debug==1){
holoCreate(2000,TurningProp:pos(),vec(10,1,1))
#holoModel(2000,"hq_rcylinder")
#holoMaterial(2000,Material)
#holoColor(2000,Color)
#holoAlpha(2000,0)
holoAng(2000,TurningProp:toWorld(TurningProp:toLocal(TurningProp:angles())+TurningPlateAng))
holoParent(2000,TurningProp)
TurningPlate=holoEntity(2000)
}
if(Debug==0){
holoCreate(2000,TurningProp:pos(),vec(10,1,1))
#holoModel(2000,"hq_rcylinder")
#holoMaterial(2000,Material)
#holoColor(2000,Color)
holoAlpha(2000,0)
holoAng(2000,TurningProp:toWorld(TurningProp:toLocal(TurningProp:angles())+TurningPlateAng))
holoParent(2000,TurningProp)
TurningPlate=holoEntity(2000)
}
}

if(T==1){
    RInitialArmDistance=(SusRmount:pos():distance(RightWheelPos))-3
    RightMountPos=SusRmount:pos()
}
if(S==1){
    LInitialArmDistance=(SusLmount:pos():distance(LeftWheelPos))-3
    LeftMountPos=SusLmount:pos() 
}



if(T<36&TopRsus&SusRmount&RWheel){T=T+1}
if(S<36&TopLsus&SusLmount&LWheel){S=S+1}
Pos=E:pos()
Ang=E:angles()


LastSaid=owner():lastSaid():explode(" ")
if(chatClk(owner())&LastSaid[1,string]=="!reset")
        {reset()}


if(SpringAngling==0){
Flex=((TopRsus:pos():distance(holoEntity(Rightspring):pos())))-1
holoScale(Rightspring,(vec(AxleSpringFatness,AxleSpringFatness,Flex*0.085)))
holoScale(Rightshock,(vec(AxleShockFatness,AxleShockFatness,Flex*0.075)))

Flex=((TopRsus:pos():distance(holoEntity(Leftspring):pos())))-1
holoScale(Leftspring,(vec(AxleSpringFatness,AxleSpringFatness,Flex*0.085)))
holoScale(Leftshock,(vec(AxleShockFatness,AxleShockFatness,Flex*0.075)))
}

if(SpringAngling==1){
    
Flex=((holoEntity(RightspringAimPos):pos():distance(holoEntity(Rightspring):pos())))-1
holoScale(Rightspring,(vec(AxleSpringFatness,AxleSpringFatness,Flex*0.085)))
holoScale(Rightshock,(vec(AxleShockFatness,AxleShockFatness,Flex*0.075)))


Flex=((holoEntity(LeftspringAimPos):pos():distance(holoEntity(Leftspring):pos())))-1
holoScale(Leftspring,(vec(AxleSpringFatness,AxleSpringFatness,Flex*0.085)))
holoScale(Leftshock,(vec(AxleShockFatness,AxleShockFatness,Flex*0.075)))
}



if(T>35){
Rightaimholo=holoEntity(RightSusMount)
AimPos = RightWheelPos
holoAng(RightSusMount,((AimPos-Rightaimholo:pos()):toAngle())+ang(0,0,-BodyHoloEntity:toWorld(ang()):roll()))

if(SpringAngling==1&Spring==1){
Rightaimholo=holoEntity(RightspringPivot)
AimPos = holoEntity(RightspringAimPos):pos()
holoAng(RightspringPivot,((AimPos-Rightaimholo:pos()):toAngle())+ang(0,0,-BodyHoloEntity:toWorld(ang()):roll()))
}


if(WheelHub==1){
holoAng(RBreakAlignment,(TurningPlate:angles()+TurningOffset))
holoAng(RBrakeDisk,RWheel:angles()+RBrakeDiskTurningOffset)
}
}




if(S>35){
Leftaimholo=holoEntity(LeftSusMount)
AimPos = LeftWheelPos
holoAng(LeftSusMount,((AimPos-Leftaimholo:pos()):toAngle())+ang(0,0,BodyHoloEntity:toWorld(ang()):roll()))

if(SpringAngling==1&Spring==1){
Leftaimholo=holoEntity(LeftspringPivot)
AimPos = holoEntity(LeftspringAimPos):pos()
holoAng(LeftspringPivot,((AimPos-Leftaimholo:pos()):toAngle())+ang(0,0,BodyHoloEntity:toWorld(ang()):roll()))
}


if(WheelHub==1){
holoAng(LBreakAlignment,(TurningPlate:angles()+TurningOffset))
holoAng(LBrakeDisk,LWheel:angles()+LBrakeDiskTurningOffset)
}
}



if(T==30){
holoPos(RightSusMount,RightMountPos)
holoParent(RightSusMount,SusRmount)
}
if(S==30){
holoPos(LeftSusMount,LeftMountPos)
holoParent(LeftSusMount,SusLmount)
}



if(T==5){

#mechanical holographic mounts



if(Debug==1){
holoCreate(I,BodyPlate:pos(),vec(1,1,1))
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
#holoAlpha(I,0)
holoAng(I,BodyPlate:toWorld(BodyPlate:toLocal(BodyPlate:angles())+BodyHoloAng))
holoParent(I,BodyPlate)
BodyHolo=I
BodyHoloEntity=holoEntity(I)
I=I+1
}

if(Debug==0){
holoCreate(I,BodyPlate:pos(),vec(10,1,1))
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,BodyPlate:toWorld(BodyPlate:toLocal(BodyPlate:angles())+BodyHoloAng))
holoParent(I,BodyPlate)
BodyHolo=I
BodyHoloEntity=holoEntity(I)
I=I+1
}


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.4,0.4,0.4)*Size)
#holoModel(I,"cube")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(ArmAngle,-90,0)))
holoParent(I,E)
RightSusMount=I
I=I+1


#if(ControlArm==1){

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.3,0.3,ContrArmWidth*1.25)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,0,0)))
holoParent(I,RightSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(RInitialArmDistance*-0.5),0)*Size),vec(RInitialArmDistance*0.043,ContrArmWidth,ContrArmThickness)*Size)
holoModel(I,"models/gibs/scanner_gib01.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,180)))
holoParent(I,RightSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(RInitialArmDistance*-1),0)*Size),vec(RInitialArmDistance*0.015,ContrArmWidth/2,0.2)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
I=I+1

}

if(WheelHub==1 & T==29){
    
if(RotorArm==1){    
if(Debug==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+5,0+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

if(Debug==1){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+5,0+RotorHeight)*Size),vec(0.35,0.35,0.35)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
holoColor(I,vec(255,0,0))
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_cylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,90)))
holoParent(I,RBreakAlignment)
RBrakeDisk=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(1,1,0.05)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,RotorTexture)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBrakeDisk)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+0,5)*Size),vec(0.4,0.25,0.23)*Size)
holoModel(I,"models/sprops/misc/fittings/bend_long_90_12.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,180)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1.5,7+RotorHeight)*Size),vec(0.4,0.4,0.18)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBreakAlignment)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+5,2.5)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RBreakAlignment)
I=I+1
}

####################################

if(RotorArm==0){    
if(Debug==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1,0+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

if(Debug==1){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1,0+RotorHeight)*Size),vec(0.35,0.35,0.35)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
holoColor(I,vec(255,0,0))
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_cylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,90)))
holoParent(I,RBreakAlignment)
RBrakeDisk=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(1,1,0.05)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,RotorTexture)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBrakeDisk)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1,3)*Size),vec(0.25,0.25,1)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,0,0)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1.5,7+RotorHeight)*Size),vec(0.4,0.4,0.18)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(-1,((RInitialArmDistance*-1)+Outspacing)-3,6+RotorHeight)*Size),vec(1,1,1)*RotorSize)
holoModel(I,"models/Items/combine_rifle_cartridge01.mdl")
holoMaterial(I,"/models/props_pipes/pipemetal001a")
holoColor(I,BreakColor)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,0,0)))
holoParent(I,RBreakAlignment)
holoClipEnabled(I,1)
holoClip(I, vec(0,0,0),vec(0,0,-1), 0)
I=I+1


}

if(Spring==1){
if(SpringAngling==1){
holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0,0,0))
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,TopRsus)
RightspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
#holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,RightSusMount)
RightspringAimPos=I
I=I+1

holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightspringPivot)
Rightspring=I
I=I+1

holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Rightspring)
Rightshock=I
I=I+1
}


if(SpringAngling==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,vec(255,0,0))
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,RBreakAlignment)
RightspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightspringPivot)
Rightspring=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Rightspring)
Rightshock=I
I=I+1
}
}
}



#left controll arm




if(S==5){

#mechanical holographic mounts




holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.4,0.4,0.4)*Size)
#holoModel(I,"cube")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(ArmAngle,-90,0)))
holoParent(I,E)
LeftSusMount=I
I=I+1


#if(ControlArm==1){

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.3,0.3,ContrArmWidth*1.25)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,0,0)))
holoParent(I,LeftSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(LInitialArmDistance*-0.5),0)*Size),vec(LInitialArmDistance*0.043,ContrArmWidth,ContrArmThickness)*Size)
holoModel(I,"models/gibs/scanner_gib01.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,180)))
holoParent(I,LeftSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(LInitialArmDistance*-1),0)*Size),vec(LInitialArmDistance*0.015,ContrArmWidth/2,0.2)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,LeftSusMount)
I=I+1
}

if(WheelHub==1 & S==29){
    
if(RotorArm==1){    
if(Debug==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)+5,0+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,-90,0)))
holoParent(I,LeftSusMount)
LBreakAlignment=I
I=I+1
}

if(Debug==1){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)+5,0+RotorHeight)*Size),vec(0.35,0.35,0.35)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
holoColor(I,vec(255,0,0))
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,-90,0)))
holoParent(I,LeftSusMount)
LBreakAlignment=I
I=I+1
}

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_cylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,90)))
holoParent(I,LBreakAlignment)
LBrakeDisk=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(1,1,0.05)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,RotorTexture)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,LBrakeDisk)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)+0,5)*Size),vec(0.4,0.25,0.23)*Size)
holoModel(I,"models/sprops/misc/fittings/bend_long_90_12.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,180)))
holoParent(I,LBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-1.5,7+RotorHeight)*Size),vec(0.4,0.4,0.18)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,LBreakAlignment)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)+5,2.5)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,LBreakAlignment)
I=I+1
}

####################################

if(RotorArm==0){    
if(Debug==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-1,0+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,-90,0)))
holoParent(I,LeftSusMount)
LBreakAlignment=I
I=I+1
}

if(Debug==1){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-1,0+RotorHeight)*Size),vec(0.35,0.35,0.35)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
holoColor(I,vec(255,0,0))
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,-90,0)))
holoParent(I,LeftSusMount)
LBreakAlignment=I
I=I+1
}

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_cylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,90)))
holoParent(I,LBreakAlignment)
LBrakeDisk=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-3,7+RotorHeight)*Size),vec(1,1,0.05)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,RotorTexture)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,LBrakeDisk)
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-1,3)*Size),vec(0.25,0.25,1)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,0,0)))
holoParent(I,LBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+Outspacing)-1.5,7+RotorHeight)*Size),vec(0.4,0.4,0.18)*RotorSize)
holoModel(I,"hq_cylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,LBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(1,((LInitialArmDistance*-1)+Outspacing)-3,6+RotorHeight)*Size),vec(1,1,1)*RotorSize)
holoModel(I,"models/Items/combine_rifle_cartridge01.mdl")
holoMaterial(I,"/models/props_pipes/pipemetal001a")
holoColor(I,BreakColor)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,180,0)))
holoParent(I,LBreakAlignment)
holoClipEnabled(I,1)
holoClip(I, vec(0,0,0),vec(0,0,-1), 0)
I=I+1


}

if(Spring==1){
if(SpringAngling==1){
holoCreate(I,TopLsus:toWorld(TopLsus:toLocal(TopLsus:pos())),vec(0,0,0))
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,TopLsus)
LeftspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
#holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,LeftSusMount)
LeftspringAimPos=I
I=I+1

holoCreate(I,TopLsus:toWorld(TopLsus:toLocal(TopLsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,LeftspringPivot)
Leftspring=I
I=I+1

holoCreate(I,TopLsus:toWorld(TopLsus:toLocal(TopLsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Leftspring)
Leftshock=I
I=I+1
}


if(SpringAngling==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,vec(255,0,0))
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,LBreakAlignment)
LeftspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,LeftspringPivot)
Leftspring=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((LInitialArmDistance*-1)+SpringOutspacing)+5,-1)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Leftspring)
Leftshock=I
I=I+1
}
}
}



