@name COntrolArm SUsepntion
@inputs TopRsus:entity SusRmount:entity  RWheel:entity TurningPlate:entity
@inputs BodyPlate:entity
@persist T Material:string Color:vector Color2:vector E:entity Size WheelHub Outspacing I BreakColor:vector
@persist RInitialSpringDistance RInitialArmDistance Rightspring RightSusMount RightspringPivot RightMountPos:vector RAxleSpringPos:vector
@persist RAxleSpringFatness SpringAngling Rightshock RAxleShockFatness RBreakAlignment RightTurningOffset:angle RBrakeDisk RightspringAimPos
@persist RBrakeDiskTurningOffset:angle RotorTexture:string RArmAngle Debug Spring BodyHolo BodyHoloAng:angle BodyHoloEntity:entity SpringOutspacing
@outputs T InitialDistance Flex
@trigger none

interval(10)
#runOnTick(1)
runOnChat(1)

RightWheelPos=RWheel:pos()+RWheel:right()*-4

if(dupefinished()){reset()}
if(first()|duped()){
    T=0
    E=entity()
    Size=1
    Debug=1
    Spring=1

    BodyHoloAng=ang(0,0,0)
    
    RAxleSpringPos=vec(23,0,4)
    RAxleSpringFatness=1.5
    RAxleShockFatness=1
    
    RArmAngle=-13
    
    RightTurningOffset=ang(0,0,0)
    RBrakeDiskTurningOffset=ang(0,0,0)
    
    WheelHub=1
    Outspacing=-0.5
    SpringOutspacing=9.5
    
    SpringAngling=1
    
    Material="models/props_canal/metalwall005b"
    
    #RotorTexture="/phoenix_storms/gear_top"
    RotorTexture="/phoenix_storms/dome_side"
    
    Color=vec(180,180,180)
    BreakColor=vec(130,50,50)
}
if(T==1){    

    #RInitialSpringDistance=TopRsus:pos():distance(BotRsus:pos())
    
    RInitialArmDistance=(SusRmount:pos():distance(RightWheelPos))-3

    
    RightMountPos=SusRmount:pos()
    #InitialDistance = DistanceVec:length()
    
if(Debug){
holoCreate(1000,RightWheelPos,vec(0.25,0.25,0.25))
holoModel(1000,"hq_sphere")
#holoMaterial(I,Material)
holoColor(1000,vec(255,0,0))

#holoAng(1000,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(1000,RWheel)
}
}



if(T<36&TopRsus&SusRmount&RWheel){T=T+1}
Pos=E:pos()
Ang=E:angles()


LastSaid=owner():lastSaid():explode(" ")
if(chatClk(owner())&LastSaid[1,string]=="!reset")
        {reset()}


if(SpringAngling==0){
Flex=((TopRsus:pos():distance(holoEntity(Rightspring):pos())))-1

holoScale(Rightspring,(vec(RAxleSpringFatness,RAxleSpringFatness,Flex*0.085)))
holoScale(Rightshock,(vec(RAxleShockFatness,RAxleShockFatness,Flex*0.075)))
}

if(SpringAngling==1){
Flex=((holoEntity(RightspringAimPos):pos():distance(holoEntity(Rightspring):pos())))-1

holoScale(Rightspring,(vec(RAxleSpringFatness,RAxleSpringFatness,Flex*0.085)))
holoScale(Rightshock,(vec(RAxleShockFatness,RAxleShockFatness,Flex*0.075)))
}



if(T>35){

Rightaimholo=holoEntity(RightSusMount)
AimPos = RightWheelPos
holoAng(RightSusMount,((AimPos-Rightaimholo:pos()):toAngle())+ang(0,0,-BodyHoloEntity:toWorld(ang()):roll()))



if(SpringAngling==1&Spring==1){
Rightaimholo=holoEntity(RightspringPivot)
AimPos = holoEntity(RightspringAimPos):pos()
holoAng(RightspringPivot,((AimPos-Rightaimholo:pos()):toAngle())+ang(0,0,BodyHoloEntity:toWorld(ang()):roll()))
}



if(WheelHub==1){

holoAng(RBreakAlignment,(TurningPlate:angles()+RightTurningOffset))
holoAng(RBrakeDisk,RWheel:angles()+RBrakeDiskTurningOffset)

}
}




if(T==30){
holoPos(RightSusMount,RightMountPos)
holoParent(RightSusMount,SusRmount)
}




if(T==5){

#mechanical holographic mounts
I=1


if(Debug==1){
holoCreate(I,BodyPlate:pos(),vec(10,1,1))
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
#holoAlpha(I,0)
holoAng(I,BodyPlate:toWorld(BodyPlate:toLocal(BodyPlate:angles())+BodyHoloAng))
holoParent(I,BodyPlate)
BodyHolo=I
BodyHoloEntity=holoEntity(I)
I=I+1
}

if(Debug==0){
holoCreate(I,BodyPlate:pos(),vec(10,1,1))
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,BodyPlate:toWorld(BodyPlate:toLocal(BodyPlate:angles())+BodyHoloAng))
holoParent(I,BodyPlate)
BodyHolo=I
BodyHoloEntity=holoEntity(I)
I=I+1
}


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.4,0.4,0.4)*Size)
#holoModel(I,"cube")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(RArmAngle,-90,0)))
holoParent(I,E)
RightSusMount=I
I=I+1


#if(ControlArm==1){

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,0,0)*Size),vec(0.3,0.3,1.75)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,0,0)))
holoParent(I,RightSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(RInitialArmDistance*-0.5),0)*Size),vec(RInitialArmDistance*0.043,1.3,0.75)*Size)
holoModel(I,"models/gibs/scanner_gib01.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,180)))
holoParent(I,RightSusMount)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,(RInitialArmDistance*-1),0)*Size),vec(RInitialArmDistance*0.015,0.75,0.2)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
I=I+1

}

if(WheelHub==1 & T==29){
    
if(Debug==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+5,0)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

if(Debug==1){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,0)*Size),vec(0.35,0.35,0.35)*Size)
#holoModel(I,"hq_rcylinder")
#holoMaterial(I,Material)
holoColor(I,vec(255,0,0))
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightSusMount)
RBreakAlignment=I
I=I+1
}

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7)*Size),vec(0,0,0)*Size)
#holoModel(I,"hq_cylinder")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,90)))
holoParent(I,RBreakAlignment)
RBrakeDisk=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-3,7)*Size),vec(1,1,0.10)*Size)
holoModel(I,"hq_cylinder")
holoMaterial(I,RotorTexture)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBrakeDisk)

I=I+1

#holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+0,10)*Size),vec(0.25,0.25,0.18)*Size)
holoModel(I,"models/sprops/misc/fittings/bend_long_90_12.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,90,0)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+0,5)*Size),vec(0.4,0.25,0.23)*Size)
holoModel(I,"models/sprops/misc/fittings/bend_long_90_12.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,180)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)-1.5,7)*Size),vec(0.4,0.4,0.18)*Size)
holoModel(I,"hq_cylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,90,0)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(1,((RInitialArmDistance*-1)+Outspacing)-3,6)*Size),vec(1.25,1.25,1)*Size)
holoModel(I,"models/Items/combine_rifle_cartridge01.mdl")
holoMaterial(I,"/models/props_pipes/pipemetal001a")
holoColor(I,BreakColor)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(90,0,180)))
holoParent(I,RBreakAlignment)
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+Outspacing)+5,2.5)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"hq_rcylinder")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RBreakAlignment)
I=I+1


if(Spring==1){
if(SpringAngling==1){
holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0,0,0))
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,TopRsus)
RightspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,2.5)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,Color)
#holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,RightSusMount)
RightspringAimPos=I
I=I+1

holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightspringPivot)
Rightspring=I
I=I+1

holoCreate(I,TopRsus:toWorld(TopRsus:toLocal(TopRsus:pos())),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Rightspring)
Rightshock=I
I=I+1
}


if(SpringAngling==0){
holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,2.5)*Size),vec(0,0,0)*Size)
#holoModel(I,"models/sprops/trans/misc/coil.mdl")
#holoMaterial(I,Material)
#holoColor(I,vec(255,0,0))
holoAlpha(I,0)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(-90,0,0)))
holoParent(I,RBreakAlignment)
RightspringPivot=I
I=I+1


holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,2.5)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/coil.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,RightspringPivot)
Rightspring=I
I=I+1

holoCreate(I,E:toWorld(E:toLocal(Pos)+vec(0,((RInitialArmDistance*-1)+SpringOutspacing)+5,2.5)*Size),vec(0.35,0.35,0.25)*Size)
holoModel(I,"models/sprops/trans/misc/shock_1.mdl")
holoMaterial(I,Material)
holoColor(I,Color)
holoAng(I,E:toWorld(E:toLocal(Ang)+ang(0,90,0)))
holoParent(I,Rightspring)
Rightshock=I
I=I+1
}
}
}
#}


